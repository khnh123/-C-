#include <vector>
#include <map>
#include <set>
#include <iostream>
#include <exception>
#include <iomanip>
using namespace std;

int gcd (int first, int second)
{
    if (second == 0)
    {
        return first;
    }
    else
    {
        return gcd (second, first % second);
    }
};

class Rational {
public:
    Rational() {
        numerator1 = 0;
        denominator1 = 1;
    }

    Rational(int numerator, int denominator) {
        int d = gcd(numerator,denominator);
        numerator1 = (numerator / d) ;
        denominator1 = (denominator / d);
        // 3. Если дробь p/q отрицательная
        if (denominator1 == 0) {
            throw invalid_argument("Denominator must not be 0.");
        }
        if (numerator1 < 0 || denominator1 < 0) { // числитель - OR знаменатель -
            //Если дробь p/q отрицательная
            //должен иметь отрицательный числитель и положительный знаменатель.
            numerator1 = abs(numerator1) * -1;
            denominator1 = abs(denominator1);
        }
        else if (numerator1 < 0 && denominator1 < 0) { // числитель - : знаменатель -
            //Если дробь p/q положительная,
            //должен иметь положительные числитель и знаменатель Rational(-2, -3)).
            numerator1 = abs(numerator1);
            denominator1 = abs(denominator1);
        }
        else if (numerator1 == 0 && denominator1 != 0) { // числитель 0 : знаменатель +-
            //Если числитель дроби равен нулю, то знаменатель должен быть равен 1.
            denominator1 = 1;
        }

    }

    int Numerator() const {
        return numerator1;
    }

    int Denominator() const {
        return denominator1;
    }
    Rational& operator=(const Rational& a) {
        //проверка на самоприсваивание
        if (this == &a) {
            return *this;
        }
        numerator1 = a.Numerator();
        denominator1 = a.Denominator();
        return *this;
    }



private:
    int numerator1;
    int denominator1;
};
Rational operator + (const Rational& a, const Rational& b) {
    return{
            a.Numerator() * b.Denominator() + b.Numerator() * a.Denominator(),
            a.Denominator() * b.Denominator()
    };
}
Rational operator - (const Rational& a, const Rational& b) {
    return{
            a.Numerator() * b.Denominator() - b.Numerator() * a.Denominator(),
            a.Denominator() * b.Denominator()
    };
}

bool operator==(const Rational& lhs,const Rational rhs){
    return (lhs.Numerator() == rhs.Numerator()) && (lhs.Denominator() == rhs.Denominator());
}

Rational operator * (const Rational& a, const Rational& b) {
    return{
            a.Numerator() * b.Numerator(),
            a.Denominator() * b.Denominator()
    };
}
Rational operator / (const Rational& a, const Rational& b) {
    if (b.Numerator() == 0) {
        throw domain_error("domain_error");
    }
    return a * Rational(b.Denominator(), b.Numerator());
}

istream& operator>>(istream& stream, Rational& a){
    int numerator = 0, denominator = 0;
    char c;
    if (stream >> numerator>> c >> denominator) {
        a = {numerator, denominator};
    };

    return stream;
}
ostream& operator<<(ostream& stream, const Rational& a){
    stream << a.Numerator() <<"/"<< a.Denominator();
    return stream;
}
bool operator>(const Rational& lhs, const Rational rhs){
    int cmp = lhs.Numerator()*rhs.Denominator() - lhs.Denominator()*rhs.Numerator();
    return cmp > 0;
}
bool operator<(const Rational& lhs, const Rational rhs){
    int cmp = lhs.Numerator()*rhs.Denominator() - lhs.Denominator()*rhs.Numerator();
    return cmp < 0;
}


int main() {
    char operation;
    string s1, s2;
    try {
        cin >> s1 >> operation >> s2;
    }
    catch (invalid_argument& ){
        cout << "Invalid argument" << endl;
        return 0;
    }
    try {
        Rational result;
        istringstream input1(s1);
        Rational r1;
        input1 >> r1;
        istringstream input2(s2);
        Rational r2;
        input2 >> r2;
        if (operation == '+'){
            result = r1 + r2;
        }
        else if (operation == '-'){
            result = r1 - r2;
        }
        else if (operation == '*'){
            result = r1 * r2;
        }
        else if (operation == '/'){
            result = r1 / r2;
        }
        cout << result<< endl;
    }
    catch (invalid_argument& ){
        cout << "Invalid argument" << endl;
    }
    catch (domain_error&) {
        cout << "Division by zero"<< endl;
    }
    return 0;
}
